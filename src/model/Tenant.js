/**
 * Lagrello API
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TenantCompanyInfo from './TenantCompanyInfo';

/**
 * The Tenant model module.
 * @module model/Tenant
 * @version 1.0.0
 */
class Tenant {
    /**
     * Constructs a new <code>Tenant</code>.
     * Tenant is what you can call your account with lagrello. In your tenant you will store all the information about your account and all your users accounts.
     * @alias module:model/Tenant
     * @param tenantId {String} 
     * @param tenantName {String} 
     * @param callbackUrl {String} 
     * @param companyInfo {module:model/TenantCompanyInfo} 
     * @param activated {Boolean} 
     */
    constructor(tenantId, tenantName, callbackUrl, companyInfo, activated) { 
        
        Tenant.initialize(this, tenantId, tenantName, callbackUrl, companyInfo, activated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tenantId, tenantName, callbackUrl, companyInfo, activated) { 
        obj['tenantId'] = tenantId;
        obj['tenantName'] = tenantName;
        obj['callbackUrl'] = callbackUrl;
        obj['companyInfo'] = companyInfo;
        obj['activated'] = activated;
    }

    /**
     * Constructs a <code>Tenant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tenant} obj Optional instance to populate.
     * @return {module:model/Tenant} The populated <code>Tenant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tenant();

            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('tenantName')) {
                obj['tenantName'] = ApiClient.convertToType(data['tenantName'], 'String');
            }
            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('companyInfo')) {
                obj['companyInfo'] = TenantCompanyInfo.constructFromObject(data['companyInfo']);
            }
            if (data.hasOwnProperty('activated')) {
                obj['activated'] = ApiClient.convertToType(data['activated'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {String} tenantId
 */
Tenant.prototype['tenantId'] = undefined;

/**
 * @member {String} tenantName
 */
Tenant.prototype['tenantName'] = undefined;

/**
 * @member {String} callbackUrl
 */
Tenant.prototype['callbackUrl'] = undefined;

/**
 * @member {module:model/TenantCompanyInfo} companyInfo
 */
Tenant.prototype['companyInfo'] = undefined;

/**
 * @member {Boolean} activated
 */
Tenant.prototype['activated'] = undefined;






export default Tenant;

