/**
 * Lagrello API
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTokenRequest from '../model/CreateTokenRequest';
import Error from '../model/Error';
import Token from '../model/Token';
import TokenList from '../model/TokenList';

/**
* Tokens service.
* @module api/TokensApi
* @version 1.0.0
*/
export default class TokensApi {

    /**
    * Constructs a new TokensApi. 
    * @alias module:api/TokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tokensCreate operation.
     * @callback module:api/TokensApi~tokensCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new token
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTokenRequest} opts.createTokenRequest 
     * @param {module:api/TokensApi~tokensCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    tokensCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['createTokenRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/v1/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensDelete operation.
     * @callback module:api/TokensApi~tokensDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specifed access token
     * @param {String} tokenId Id of the token you want to delete
     * @param {module:api/TokensApi~tokensDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tokensDelete(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling tokensDelete");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tokens/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokensList operation.
     * @callback module:api/TokensApi~tokensListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all active tokens in tenant
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size Maximum of results per page
     * @param {Number} opts.page The page you want to see
     * @param {module:api/TokensApi~tokensListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenList}
     */
    tokensList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenList;
      return this.apiClient.callApi(
        '/v1/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
