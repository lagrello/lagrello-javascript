/**
 * Lagrello API
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import TotpEnableRequest from '../model/TotpEnableRequest';
import TotpEnableResponse from '../model/TotpEnableResponse';
import User from '../model/User';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersEmailAuth operation.
     * @callback module:api/AuthApi~usersEmailAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gives back user data for the magic link token
     * @param {String} payload The magic link token the user sent
     * @param {module:api/AuthApi~usersEmailAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersEmailAuth(payload, callback) {
      let postBody = null;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling usersEmailAuth");
      }

      let pathParams = {
      };
      let queryParams = {
        'payload': payload
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersEmailSend operation.
     * @callback module:api/AuthApi~usersEmailSendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint will be used when you want to send a magic login link to specified user
     * @param {String} userId Id of the user you want to send magic link to
     * @param {module:api/AuthApi~usersEmailSendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersEmailSend(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersEmailSend");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/users/{userId}/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTotpAuth operation.
     * @callback module:api/AuthApi~usersTotpAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify users TOTP token
     * @param {String} userId Id of the user you want to verify TOTP code for
     * @param {String} payload The totp token the user sent
     * @param {module:api/AuthApi~usersTotpAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersTotpAuth(userId, payload, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTotpAuth");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling usersTotpAuth");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'payload': payload
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/{userId}/totp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersTotpToggle operation.
     * @callback module:api/AuthApi~usersTotpToggleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotpEnableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables or disables Time-based One-Time Password authentication method for specified user
     * When you want your users to be able to use TOTP authentication you need to send enable set to true as payload to this endpoint. To turn off TOTP set enable to false. When enabling you will recieve the secret key and a QR code link. The QR code you need to show your user for them to scan.
     * @param {String} userId Id of the user you want to enable TOTP for
     * @param {Object} opts Optional parameters
     * @param {module:model/TotpEnableRequest} opts.totpEnableRequest 
     * @param {module:api/AuthApi~usersTotpToggleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotpEnableResponse}
     */
    usersTotpToggle(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['totpEnableRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersTotpToggle");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TotpEnableResponse;
      return this.apiClient.callApi(
        '/v1/users/{userId}/totp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
