/**
 * Lagrello API
 * API specification for Lagrello, a simple to use authentication service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@lagrello.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* Images service.
* @module api/ImagesApi
* @version 1.0.0
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the imagesTotp operation.
     * @callback module:api/ImagesApi~imagesTotpCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a generated QR code
     * This endpoint does not do any lookups of any sort. It will just generate a QR code from the parameters supplied to it.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tenantName The company name you your users to see in their TOTP application
     * @param {String} opts.userId The userId of the user you want to create the TOTP QR image for
     * @param {String} opts.userSecret The TOTP secret for the specified user
     * @param {module:api/ImagesApi~imagesTotpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    imagesTotp(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tenantName': opts['tenantName'],
        'userId': opts['userId'],
        'userSecret': opts['userSecret']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['image/png', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/images/totp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
